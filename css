div class="login-container">
  <div class="login-card">
    <div class="login-header">
      <h1>Welcome Back</h1>
      <p>Sign in to your account</p>
    </div>
    
    <form (ngSubmit)="onSubmit()" class="login-form" [@formAnimation]="formState">
      <div class="form-group" [@inputAnimation]="formState">
        <label for="email">Email</label>
        <div class="input-container">
          <i class="material-icons">email</i>
          <input 
            type="email" 
            id="email" 
            placeholder="Enter your email" 
            name="username" 
            [(ngModel)]="credentials.email" 
            required
            (focus)="onInputFocus('email')"
            (blur)="onInputBlur('email')"
            [class.focused]="focusedField === 'email'">
        </div>
      </div>
      
      <div class="form-group" [@inputAnimation]="formState">
        <label for="password">Password</label>
        <div class="input-container">
          <i class="material-icons">lock</i>
          <input 
            [type]="showPassword ? 'text' : 'password'" 
            id="password" 
            placeholder="Enter your password" 
            name="password" 
            [(ngModel)]="credentials.password" 
            required
            (focus)="onInputFocus('password')"
            (blur)="onInputBlur('password')"
            [class.focused]="focusedField === 'password'">
          <i class="material-icons password-toggle" (click)="togglePasswordVisibility()">
            {{ showPassword ? 'visibility_off' : 'visibility' }}
          </i>
        </div>
      </div>
      
      <div class="form-actions">
        <div class="remember-me">
          <input type="checkbox" id="remember" name="remember" [(ngModel)]="rememberMe">
          <label for="remember">Remember me</label>
        </div>
        <a href="#" class="forgot-password">Forgot password?</a>
      </div>
      
      <button 
        type="submit" 
        [disabled]="!credentials.email || !credentials.password"
        [@buttonAnimation]="formState"
        [class.button-active]="isSubmitting">
        <span *ngIf="!isSubmitting">Login</span>
        <div *ngIf="isSubmitting" class="spinner"></div>
      </button>
    </form>
    
    <div class="login-footer" [@footerAnimation]="formState">
      <p>Don't have an account? <a href="#">Sign up</a></p>
    </div>
  </div>
</div>

@@@@@


import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { trigger, state, style, animate, transition } from '@angular/animations';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss'],
  animations: [
    trigger('formAnimation', [
      state('initial', style({
        opacity: 0,
        transform: 'translateY(20px)'
      })),
      state('visible', style({
        opacity: 1,
        transform: 'translateY(0)'
      })),
      transition('initial => visible', animate('0.5s ease-out'))
    ]),
    trigger('inputAnimation', [
      state('initial', style({
        opacity: 0,
        transform: 'translateX(-20px)'
      })),
      state('visible', style({
        opacity: 1,
        transform: 'translateX(0)'
      })),
      transition('initial => visible', animate('0.5s ease-out {{delay}}ms')),
    ]),
    trigger('buttonAnimation', [
      state('initial', style({
        opacity: 0,
        transform: 'scale(0.9)'
      })),
      state('visible', style({
        opacity: 1,
        transform: 'scale(1)'
      })),
      transition('initial => visible', animate('0.5s ease-out 600ms')),
      transition('* => *', [
        animate('0.2s ease-in-out')
      ])
    ]),
    trigger('footerAnimation', [
      state('initial', style({
        opacity: 0
      })),
      state('visible', style({
        opacity: 1
      })),
      transition('initial => visible', animate('0.5s ease-out 800ms'))
    ])
  ]
})
export class LoginComponent implements OnInit {
  credentials = {
    email: '',
    password: ''
  };
  
  formState = 'initial';
  focusedField: string | null = null;
  showPassword = false;
  rememberMe = false;
  isSubmitting = false;

  ngOnInit() {
    // Start animations after component initialization
    setTimeout(() => {
      this.formState = 'visible';
    }, 100);
  }

  onInputFocus(field: string) {
    this.focusedField = field;
  }

  onInputBlur(field: string) {
    if (!this.credentials[field as keyof typeof this.credentials]) {
      this.focusedField = null;
    }
  }

  togglePasswordVisibility() {
    this.showPassword = !this.showPassword;
  }

  onSubmit() {
    // Validate form
    if (!this.credentials.email || !this.credentials.password) {
      return;
    }
    
    // Show loading state
    this.isSubmitting = true;
    
    // Simulate API call
    setTimeout(() => {
      console.log('Login attempt:', this.credentials);
      this.isSubmitting = false;
      
      // Here you would typically redirect or show success message
    }, 1500);
  }
}


@@

@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap');
@import url('https://fonts.googleapis.com/icon?family=Material+Icons');

:host {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background: linear-gradient(135deg, #673ab7 0%, #9c27b0 100%);
  font-family: 'Poppins', sans-serif;
}

.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  padding: 2rem;
}

.login-card {
  width: 100%;
  max-width: 450px;
  background-color: white;
  border-radius: 1rem;
  box-shadow: 0 15px 30px rgba(103, 58, 183, 0.3);
  overflow: hidden;
  padding: 2rem;
}

.login-header {
  text-align: center;
  margin-bottom: 2rem;
  
  h1 {
    color: #673ab7;
    font-weight: 600;
    margin-bottom: 0.5rem;
    font-size: 1.8rem;
  }
  
  p {
    color: #9e9e9e;
    font-size: 0.9rem;
  }
}

.login-form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.form-group {
  display: flex;
  flex-direction: column;
  position: relative;
  
  label {
    font-size: 0.9rem;
    color: #673ab7;
    margin-bottom: 0.5rem;
    font-weight: 500;
  }
}

.input-container {
  position: relative;
  display: flex;
  align-items: center;
  
  i {
    position: absolute;
    left: 1rem;
    color: #9e9e9e;
    transition: color 0.3s ease;
  }
  
  input {
    width: 100%;
    padding: 1rem 1rem 1rem 3rem;
    border: 2px solid #e0e0e0;
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: all 0.3s ease;
    
    &:focus, &.focused {
      border-color: #673ab7;
      outline: none;
      box-shadow: 0 0 0 2px rgba(103, 58, 183, 0.2);
      
      & + i {
        color: #673ab7;
      }
    }
    
    &::placeholder {
      color: #bdbdbd;
    }
  }
  
  .password-toggle {
    position: absolute;
    right: 1rem;
    cursor: pointer;
    color: #9e9e9e;
    
    &:hover {
      color: #673ab7;
    }
  }
}

.form-actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.5rem;
  
  .remember-me {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    
    input[type="checkbox"] {
      accent-color: #673ab7;
    }
    
    label {
      font-size: 0.9rem;
      color: #757575;
    }
  }
  
  .forgot-password {
    font-size: 0.9rem;
    color: #673ab7;
    text-decoration: none;
    transition: color 0.3s ease;
    
    &:hover {
      color: #9c27b0;
      text-decoration: underline;
    }
  }
}

button {
  background-color: #673ab7;
  color: white;
  border: none;
  border-radius: 0.5rem;
  padding: 1rem;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 1rem;
  
  &:hover:not(:disabled) {
    background-color: #7e57c2;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(103, 58, 183, 0.3);
  }
  
  &:active:not(:disabled), &.button-active {
    transform: translateY(0);
    box-shadow: 0 2px 5px rgba(103, 58, 183, 0.3);
  }
  
  &:disabled {
    background-color: #bdbdbd;
    cursor: not-allowed;
  }
  
  .spinner {
    width: 20px;
    height: 20px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s infinite linear;
  }
}

.login-footer {
  text-align: center;
  margin-top: 2rem;
  
  p {
    color: #757575;
    font-size: 0.9rem;
    
    a {
      color: #673ab7;
      text-decoration: none;
      font-weight: 500;
      transition: color 0.3s ease;
      
      &:hover {
        color: #9c27b0;
        text-decoration: underline;
      }
    }
  }
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

// Responsive adjustments
@media (max-width: 576px) {
  .login-card {
    padding: 1.5rem;
  }
  
  .login-header h1 {
    font-size: 1.5rem;
  }
  
  .form-actions {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.5rem;
  }
}
