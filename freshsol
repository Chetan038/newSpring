edit

<!doctype html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Edit Employee</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2 class="mb-4">Edit Employee</h2>
        
        <form th:action="@{/employees/edit}" method="post" th:object="${employee}">
            <div class="mb-3">
                <label for="empId" class="form-label">Employee ID</label>
                <input type="text" class="form-control" id="empId" name="EMP_ID" th:value="${employee.EMP_ID}" readonly>
            </div>
            
            <div class="mb-3">
                <label for="empName" class="form-label">Employee Name</label>
                <input type="text" class="form-control" id="empName" name="E_NAME" th:value="${employee.E_NAME}" required>
            </div>
            
            <div class="mb-3">
                <label for="salary" class="form-label">Salary</label>
                <input type="number" step="0.01" class="form-control" id="salary" name="SALARY" th:value="${employee.SALARY}" required>
            </div>
            
            <div class="mb-3">
                <label for="department" class="form-label">Department</label>
                <select class="form-select" id="department" name="DEPARTMENT" required>
                    <option value="HR" th:selected="${employee.DEPARTMENT == 'HR'}">HR</option>
                    <option value="IT" th:selected="${employee.DEPARTMENT == 'IT'}">IT</option>
                    <option value="Finance" th:selected="${employee.DEPARTMENT == 'Finance'}">Finance</option>
                    <option value="Marketing" th:selected="${employee.DEPARTMENT == 'Marketing'}">Marketing</option>
                    <option value="Sales" th:selected="${employee.DEPARTMENT == 'Sales'}">Sales</option>
                </select>
            </div>
            
            <div class="mb-3">
                <label for="status" class="form-label">Status</label>
                <select class="form-select" id="status" name="STATUS" required>
                    <option value="Active" th:selected="${employee.STATUS == 'Active'}">Active</option>
                    <option value="Inactive" th:selected="${employee.STATUS == 'Inactive'}">Inactive</option>
                    <option value="Probation" th:selected="${employee.STATUS == 'Probation'}">Probation</option>
                </select>
            </div>
            
            <div class="mb-3">
                <label for="phoneNo" class="form-label">Phone Number</label>
                <input type="tel" class="form-control" id="phoneNo" name="PHONENO" th:value="${employee.PHONENO}" required>
            </div>
            
            <button type="submit" class="btn btn-primary">Update Employee</button>
            <a href="/employees" class="btn btn-secondary ms-2">Cancel</a>
        </form>
    </div>
</body>
</html>


@@####
package com.boostmytools.empmng.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.boostmytools.empmng.models.Employee;
import com.boostmytools.empmng.services.EmployeeRepository;

@Controller
@RequestMapping("/employees")
public class EmployeesController {

    @Autowired
    private EmployeeRepository repo;

    @GetMapping({"", "/"})
    public String showEmployeeList(Model model) {
        List<Employee> employees = repo.findAll();
        model.addAttribute("employees", employees);
        return "employees/index";
    }
    
    @GetMapping("/delete")
    public String deleteEmployee(@RequestParam String EMP_ID, RedirectAttributes redirectAttributes) {
        try {
            if (repo.existsById(EMP_ID)) {
                repo.deleteById(EMP_ID);
                redirectAttributes.addFlashAttribute("successMessage", "Employee deleted successfully");
            } else {
                redirectAttributes.addFlashAttribute("errorMessage", "Employee not found");
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Error deleting employee: " + e.getMessage());
        }
        
        return "redirect:/employees";
    }
    
    @GetMapping("/create")
    public String showCreateForm(Model model) {
        model.addAttribute("employee", new Employee());
        return "employees/create";
    }
    
    @PostMapping("/create")
    public String createEmployee(@ModelAttribute Employee employee, RedirectAttributes redirectAttributes) {
        try {
            if (repo.existsById(employee.getEMP_ID())) {
                redirectAttributes.addFlashAttribute("errorMessage", "Employee with ID " + employee.getEMP_ID() + " already exists");
                return "redirect:/employees/create";
            }
            
            repo.save(employee);
            redirectAttributes.addFlashAttribute("successMessage", "Employee added successfully");
            return "redirect:/employees";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Error adding employee: " + e.getMessage());
            return "redirect:/employees/create";
        }
    }
    
    @GetMapping("/edit")
    public String showEditForm(@RequestParam String EMP_ID, Model model, RedirectAttributes redirectAttributes) {
        try {
            Optional<Employee> employeeOptional = repo.findById(EMP_ID);
            
            if (employeeOptional.isPresent()) {
                model.addAttribute("employee", employeeOptional.get());
                return "employees/edit";
            } else {
                redirectAttributes.addFlashAttribute("errorMessage", "Employee not found");
                return "redirect:/employees";
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Error finding employee: " + e.getMessage());
            return "redirect:/employees";
        }
    }
    
    @PostMapping("/edit")
    public String updateEmployee(@ModelAttribute Employee employee, RedirectAttributes redirectAttributes) {
        try {
            // Check if employee exists before updating
            if (repo.existsById(employee.getEMP_ID())) {
                repo.save(employee);
                redirectAttributes.addFlashAttribute("successMessage", "Employee updated successfully");
                return "redirect:/employees";
            } else {
                redirectAttributes.addFlashAttribute("errorMessage", "Employee not found");
                return "redirect:/employees";
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Error updating employee: " + e.getMessage());
            return "redirect:/employees/edit?EMP_ID=" + employee.getEMP_ID();
        }
    }
}

package com.boostmytools.empmng.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.boostmytools.empmng.models.Employee;
import com.boostmytools.empmng.services.EmployeeRepository;

@Controller
@RequestMapping("/employees")
public class EmployeesController {

    @Autowired
    private EmployeeRepository repo;

    @GetMapping({"", "/"})
    public String showEmployeeList(Model model) {
        List<Employee> employees = repo.findAll();
        model.addAttribute("employees", employees);
        return "employees/index";
    }
    
    @GetMapping("/delete")
    public String deleteEmployee(@RequestParam String EMP_ID, RedirectAttributes redirectAttributes) {
        try {
            if (repo.existsById(EMP_ID)) {
                repo.deleteById(EMP_ID);
                redirectAttributes.addFlashAttribute("successMessage", "Employee deleted successfully");
            } else {
                redirectAttributes.addFlashAttribute("errorMessage", "Employee not found");
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Error deleting employee: " + e.getMessage());
        }
        
        return "redirect:/employees";
    }
    
    @GetMapping("/create")
    public String showCreateForm(Model model) {
        // If you want to pass a new Employee object to the form
        model.addAttribute("employee", new Employee());
        return "employees/create";
    }
    
    @PostMapping("/create")
    public String createEmployee(@ModelAttribute Employee employee, RedirectAttributes redirectAttributes) {
        try {
            // Check if employee with given ID already exists
            if (repo.existsById(employee.getEMP_ID())) {
                redirectAttributes.addFlashAttribute("errorMessage", "Employee with ID " + employee.getEMP_ID() + " already exists");
                return "redirect:/employees/create";
            }
            
            // Save the new employee
            repo.save(employee);
            redirectAttributes.addFlashAttribute("successMessage", "Employee added successfully");
            return "redirect:/employees";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Error adding employee: " + e.getMessage());
            return "redirect:/employees/create";
        }
    }
}



@@@@@@@@@@@@
<!doctype html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Add New Employee</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2 class="mb-4">Add New Employee</h2>
        
        <form th:action="@{/employees/create}" method="post">
            <div class="mb-3">
                <label for="empId" class="form-label">Employee ID</label>
                <input type="text" class="form-control" id="empId" name="EMP_ID" required>
            </div>
            
            <div class="mb-3">
                <label for="empName" class="form-label">Employee Name</label>
                <input type="text" class="form-control" id="empName" name="E_NAME" required>
            </div>
            
            <div class="mb-3">
                <label for="salary" class="form-label">Salary</label>
                <input type="number" step="0.01" class="form-control" id="salary" name="SALARY" required>
            </div>
            
            <div class="mb-3">
                <label for="department" class="form-label">Department</label>
                <select class="form-select" id="department" name="DEPARTMENT" required>
                    <option value="">Select Department</option>
                    <option value="HR">HR</option>
                    <option value="IT">IT</option>
                    <option value="Finance">Finance</option>
                    <option value="Marketing">Marketing</option>
                    <option value="Sales">Sales</option>
                </select>
            </div>
            
            <div class="mb-3">
                <label for="status" class="form-label">Status</label>
                <select class="form-select" id="status" name="STATUS" required>
                    <option value="">Select Status</option>
                    <option value="Active">Active</option>
                    <option value="Inactive">Inactive</option>
                    <option value="Probation">Probation</option>
                </select>
            </div>
            
            <div class="mb-3">
                <label for="phoneNo" class="form-label">Phone Number</label>
                <input type="tel" class="form-control" id="phoneNo" name="PHONENO" required>
            </div>
            
            <button type="submit" class="btn btn-primary">Add Employee</button>
            <a href="/employees" class="btn btn-secondary ms-2">Cancel</a>
        </form>
    </div>
</body>
</html>





package com.boostmytools.empmng.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.boostmytools.empmng.models.Employee;
import com.boostmytools.empmng.services.EmployeeRepository;

@Controller
@RequestMapping("/employees")
public class EmployeesController {

    @Autowired
    private EmployeeRepository repo;

    @GetMapping({"", "/"})
    public String showEmployeeList(Model model) {
        List<Employee> employees = repo.findAll();
        model.addAttribute("employees", employees);
        return "employees/index";
    }
    
    @GetMapping("/delete")
    public String deleteEmployee(@RequestParam String EMP_ID, RedirectAttributes redirectAttributes) {
        try {
            // Check if the employee exists before deleting
            if (repo.existsById(EMP_ID)) {
                repo.deleteById(EMP_ID);
                redirectAttributes.addFlashAttribute("successMessage", "Employee deleted successfully");
            } else {
                redirectAttributes.addFlashAttribute("errorMessage", "Employee not found");
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Error deleting employee: " + e.getMessage());
        }
        
        return "redirect:/employees";
    }
}



@@@


<!doctype html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Employee Data</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h1 class="text-center my-4">Employee Details</h1>

        <!-- Success Message -->
        <div th:if="${successMessage}" class="alert alert-success alert-dismissible fade show" role="alert">
            <span th:text="${successMessage}"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>

        <!-- Error Message -->
        <div th:if="${errorMessage}" class="alert alert-danger alert-dismissible fade show" role="alert">
            <span th:text="${errorMessage}"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Salary</th>
                        <th>Department</th>
                        <th>Status</th>
                        <th>Phone</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <tr th:each="employee : ${employees}">
                        <td th:text="${employee.EMP_ID}"></td>
                        <td th:text="${employee.E_NAME}"></td>
                        <td th:text="${employee.SALARY}"></td>
                        <td th:text="${employee.DEPARTMENT}"></td>
                        <td th:text="${employee.STATUS}"></td>
                        <td th:text="${employee.PHONENO}"></td>
                        <td>
                            <a class="btn btn-primary btn-sm" th:href="@{/employees/edit(EMP_ID=${employee.EMP_ID})}">Edit</a>
                            <a class="btn btn-danger btn-sm" th:href="@{/employees/delete(EMP_ID=${employee.EMP_ID})}" onclick="return confirm('Are you sure you want to delete this employee?')">Delete</a>
                        </td>
                    </tr>
                </tbody>
            </table>
            
            <a class="btn btn-primary" href="/employees/create">Add Employee</a>
            <button class="btn btn-danger" onclick="logout()">Logout</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
