This is my Employe management project using spring boot ,jsp ,oracle database, mvc,theyleaf

this is my file struture and code files

src/main/java

com.botmytools.emppmng.controllers->EmployeesController.java,LoginController.java
com.botmytools.emppmng.models->Employee.java,User.java
com.botmytools.emppmng.services->EmployeeRepository.java,UserRepository.java

and Static/index.html
template/employess/index.html,edit.html,create.html
template/login.html


LoginController.java
package com.bostmytools.emppmng.controllers;

import com.bostmytools.emppmng.models.User;
import com.bostmytools.emppmng.services.UserRepository;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Optional;

@Controller
public class LoginController {

    @Autowired
    private UserRepository userRepository;

    @GetMapping("/login")
    public String showLoginPage() {
        return "login"; 
    }

    @PostMapping("/login")
    public String login(@RequestParam String email, @RequestParam String password, HttpSession session, HttpServletRequest request, Model model) {
        Optional<User> userOptional = userRepository.findByEmailAndPassword(email, password);

        if (userOptional.isPresent()) {
            session.setAttribute("loggedInUser", userOptional.get());
            return "redirect:/employees"; 
        } else {
            model.addAttribute("errorMessage", "Invalid email or password");
            return "login";
        }
    }

    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "redirect:/login";
    }
}
User.java
package com.bostmytools.emppmng.models;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "USERR", schema = "NEWSO")
public class User {
    
    @Id
    @Column(name = "ID")
    private Long id;
    
    @Column(name = "NAME", nullable = false)
    private String name;
    
    @Column(name = "EMAIL", nullable = false)
    private String email;
    
    @Column(name = "PASSWORD", nullable = false)
    private String password;
    
    @Column(name = "PHONENO", nullable = false)
    private String phoneNo;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }

    public String getPhoneNo() { return phoneNo; }
    public void setPhoneNo(String phoneNo) { this.phoneNo = phoneNo; }
}
UserRepository.java
package com.bostmytools.emppmng.services;

import org.springframework.data.jpa.repository.JpaRepository;
import com.bostmytools.emppmng.models.User;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmailAndPassword(String email, String password);
}




EmployeesController.java
package com.bostmytools.emppmng.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bostmytools.emppmng.models.Employee;
import com.bostmytools.emppmng.services.EmployeeRepository;

@Controller
@RequestMapping("/employees")
public class EmployeesController {

    @Autowired
    private EmployeeRepository repo;

    @GetMapping({"", "/"})
    public String showEmployeeList(Model model) {
        List<Employee> employees = repo.findAll();
        model.addAttribute("employees", employees);
        return "employees/index";
    }
    
    @GetMapping("/delete")
    public String deleteEmployee(@RequestParam String EMP_ID) {
        try {
            if (repo.existsById(EMP_ID)) {
                repo.deleteById(EMP_ID);
               
            } else {
            }
        } catch (Exception e) {
        }
        
        return "redirect:/employees";
    }
    
    @GetMapping("/create")
    public String showCreateForm(Model model) {
        model.addAttribute("employee", new Employee());
        return "employees/create";
    }
    
    @PostMapping("/create")
    public String createEmployee(@ModelAttribute Employee employee) {
        try {
            if (repo.existsById(employee.getEMP_ID())) {
               
                return "redirect:/employees/create";
            }
            
            repo.save(employee);
           
            return "redirect:/employees";
        } catch (Exception e) {
           
            return "redirect:/employees/create";
        }
    }
    
    @GetMapping("/edit")
    public String showEditForm(@RequestParam String EMP_ID, Model model, RedirectAttributes redirectAttributes) {
        try {
            Optional<Employee> employeeOptional = repo.findById(EMP_ID);
            
            if (employeeOptional.isPresent()) {
                model.addAttribute("employee", employeeOptional.get());
                return "employees/edit";
            } else {
                redirectAttributes.addFlashAttribute("errorMessage", "Employee not found");
                return "redirect:/employees";
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Error finding employee: " + e.getMessage());
            return "redirect:/employees";
        }
    }
    
    @PostMapping("/edit")
    public String updateEmployee(@ModelAttribute Employee employee, RedirectAttributes redirectAttributes) {
        try {
            // Check if employee exists before updating
            if (repo.existsById(employee.getEMP_ID())) {
                repo.save(employee);
                redirectAttributes.addFlashAttribute("successMessage", "Employee updated successfully");
                return "redirect:/employees";
            } else {
                redirectAttributes.addFlashAttribute("errorMessage", "Employee not found");
                return "redirect:/employees";
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Error updating employee: " + e.getMessage());
            return "redirect:/employees/edit?EMP_ID=" + employee.getEMP_ID();
        }
    }
}

EmployeeRepository.java
package com.bostmytools.emppmng.services;

import org.springframework.data.jpa.repository.JpaRepository;

import com.bostmytools.emppmng.models.Employee;

public interface EmployeeRepository extends JpaRepository<Employee, String>{

}
Employee.java


package com.bostmytools.emppmng.models;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name="EMPLOYEE", schema="NEWSO")
public class Employee {

	@Id
	@Column(name="EMP_ID",nullable=false)
	private String EMP_ID;
	@Column(name="E_NAME",nullable=false)
	private String E_NAME;
	@Column(name="SALARY",nullable=false)
	private Double SALARY;
	@Column(name="DEPARTMENT",nullable=false)
	private String DEPARTMENT;
	@Column(name="STATUS",nullable=false)
	private String STATUS;
	@Column(name="PHONENO",nullable=false)
	private String PHONENO;
	public String getEMP_ID() {
		return EMP_ID;
	}
	public void setEMP_ID(String eMP_ID) {
		EMP_ID = eMP_ID;
	}
	public String getE_NAME() {
		return E_NAME;
	}
	public void setE_NAME(String e_NAME) {
		E_NAME = e_NAME;
	}
	public Double getSALARY() {
		return SALARY;
	}
	public void setSALARY(Double sALARY) {
		SALARY = sALARY;
	}
	public String getDEPARTMENT() {
		return DEPARTMENT;
	}
	public void setDEPARTMENT(String dEPARTMENT) {
		DEPARTMENT = dEPARTMENT;
	}
	public String getSTATUS() {
		return STATUS;
	}
	public void setSTATUS(String sTATUS) {
		STATUS = sTATUS;
	}
	public String getPHONENO() {
		return PHONENO;
	}
	public void setPHONENO(String pHONENO) {
		PHONENO = pHONENO;
	}
	
}

Static/index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h1 class="text-center my-4">EMPLOYEE MANAGEMENT</h1>
        
        <a class="btn btn-primary" href="/employees">Employees Details</a>
        <a class="btn btn-primary" href="">Login</a>
    </div>

    

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


template/employees/index.html
<!doctype html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Employee Data</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h1 class="text-center my-4">Employee Details</h1>

        <!-- Success Message -->
        <div th:if="${successMessage}" class="alert alert-success alert-dismissible fade show" role="alert">
            <span th:text="${successMessage}"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>

        <!-- Error Message -->
        <div th:if="${errorMessage}" class="alert alert-danger alert-dismissible fade show" role="alert">
            <span th:text="${errorMessage}"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Salary</th>
                        <th>Department</th>
                        <th>Status</th>
                        <th>Phone</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <tr th:each="employee : ${employees}">
                        <td th:text="${employee.EMP_ID}"></td>
                        <td th:text="${employee.E_NAME}"></td>
                        <td th:text="${employee.SALARY}"></td>
                        <td th:text="${employee.DEPARTMENT}"></td>
                        <td th:text="${employee.STATUS}"></td>
                        <td th:text="${employee.PHONENO}"></td>
                        <td>
                            <a class="btn btn-primary btn-sm" th:href="@{/employees/edit(EMP_ID=${employee.EMP_ID})}">Edit</a>
                            <a class="btn btn-danger btn-sm" th:href="@{/employees/delete(EMP_ID=${employee.EMP_ID})}" onclick="return confirm('Are you sure you want to delete this employee?')">Delete</a>
                        </td>
                    </tr>
                </tbody>
            </table>
            
            <a class="btn btn-primary" href="/employees/create">Add Employee</a>
            <button class="btn btn-danger" onclick="logout()">Logout</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

login.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Login</title>
  
</head>
<body>
    <div class="login-container">
        <h2>Login</h2>
        <form action="/login" method="post">
            <div>
                <input type="email" name="email" placeholder="Enter your email" required>
            </div>
            <div>
                <input type="password" name="password" placeholder="Enter your password" required>
            </div>
            <button type="submit">Login</button>
            <p th:if="${error}" th:text="${error}"></p>
        </form>
    </div>
</body>
</html>



according to this file strute make a session management when the useer login and when user logout from index.html in tempaltes folder the session should over 
and diplay the login username in the index.html page and when we logout and try to open or press back button in borwser it should not open index.html page of templates folder it should 
open only when user is logged in
