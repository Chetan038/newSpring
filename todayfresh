This is my Employe management project using spring boot ,jsp ,oracle database, mvc,theyleaf

this is my file struture and code files

src/main/java

com.botmytools.emppmng.controllers->EmployeesController.java
com.botmytools.emppmng.models->Employee.java
com.botmytools.emppmng.services->EmployeeRepository.java

and Static/index.html
template/employess/index.html,edit.html/create.html


EmployeesController.java
package com.bostmytools.emppmng.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bostmytools.emppmng.models.Employee;
import com.bostmytools.emppmng.services.EmployeeRepository;

@Controller
@RequestMapping("/employees")
public class EmployeesController {

    @Autowired
    private EmployeeRepository repo;

    @GetMapping({"", "/"})
    public String showEmployeeList(Model model) {
        List<Employee> employees = repo.findAll();
        model.addAttribute("employees", employees);
        return "employees/index";
    }
    
    @GetMapping("/delete")
    public String deleteEmployee(@RequestParam String EMP_ID) {
        try {
            if (repo.existsById(EMP_ID)) {
                repo.deleteById(EMP_ID);
               
            } else {
            }
        } catch (Exception e) {
        }
        
        return "redirect:/employees";
    }
    
    @GetMapping("/create")
    public String showCreateForm(Model model) {
        model.addAttribute("employee", new Employee());
        return "employees/create";
    }
    
    @PostMapping("/create")
    public String createEmployee(@ModelAttribute Employee employee) {
        try {
            if (repo.existsById(employee.getEMP_ID())) {
               
                return "redirect:/employees/create";
            }
            
            repo.save(employee);
           
            return "redirect:/employees";
        } catch (Exception e) {
           
            return "redirect:/employees/create";
        }
    }
    
    @GetMapping("/edit")
    public String showEditForm(@RequestParam String EMP_ID, Model model, RedirectAttributes redirectAttributes) {
        try {
            Optional<Employee> employeeOptional = repo.findById(EMP_ID);
            
            if (employeeOptional.isPresent()) {
                model.addAttribute("employee", employeeOptional.get());
                return "employees/edit";
            } else {
                redirectAttributes.addFlashAttribute("errorMessage", "Employee not found");
                return "redirect:/employees";
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Error finding employee: " + e.getMessage());
            return "redirect:/employees";
        }
    }
    
    @PostMapping("/edit")
    public String updateEmployee(@ModelAttribute Employee employee, RedirectAttributes redirectAttributes) {
        try {
            // Check if employee exists before updating
            if (repo.existsById(employee.getEMP_ID())) {
                repo.save(employee);
                redirectAttributes.addFlashAttribute("successMessage", "Employee updated successfully");
                return "redirect:/employees";
            } else {
                redirectAttributes.addFlashAttribute("errorMessage", "Employee not found");
                return "redirect:/employees";
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Error updating employee: " + e.getMessage());
            return "redirect:/employees/edit?EMP_ID=" + employee.getEMP_ID();
        }
    }
}

EmployeeRepository.java
package com.bostmytools.emppmng.services;

import org.springframework.data.jpa.repository.JpaRepository;

import com.bostmytools.emppmng.models.Employee;

public interface EmployeeRepository extends JpaRepository<Employee, String>{

}
Employee.java


package com.bostmytools.emppmng.models;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name="EMPLOYEE", schema="NEWSO")
public class Employee {

	@Id
	@Column(name="EMP_ID",nullable=false)
	private String EMP_ID;
	@Column(name="E_NAME",nullable=false)
	private String E_NAME;
	@Column(name="SALARY",nullable=false)
	private Double SALARY;
	@Column(name="DEPARTMENT",nullable=false)
	private String DEPARTMENT;
	@Column(name="STATUS",nullable=false)
	private String STATUS;
	@Column(name="PHONENO",nullable=false)
	private String PHONENO;
	public String getEMP_ID() {
		return EMP_ID;
	}
	public void setEMP_ID(String eMP_ID) {
		EMP_ID = eMP_ID;
	}
	public String getE_NAME() {
		return E_NAME;
	}
	public void setE_NAME(String e_NAME) {
		E_NAME = e_NAME;
	}
	public Double getSALARY() {
		return SALARY;
	}
	public void setSALARY(Double sALARY) {
		SALARY = sALARY;
	}
	public String getDEPARTMENT() {
		return DEPARTMENT;
	}
	public void setDEPARTMENT(String dEPARTMENT) {
		DEPARTMENT = dEPARTMENT;
	}
	public String getSTATUS() {
		return STATUS;
	}
	public void setSTATUS(String sTATUS) {
		STATUS = sTATUS;
	}
	public String getPHONENO() {
		return PHONENO;
	}
	public void setPHONENO(String pHONENO) {
		PHONENO = pHONENO;
	}
	
}

Static/index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h1 class="text-center my-4">EMPLOYEE MANAGEMENT</h1>
        
        <a class="btn btn-primary" href="/employees">Employees Details</a>
        <a class="btn btn-primary" href="">Login</a>
    </div>

    

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


template/employees/index.html
<!doctype html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Employee Data</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h1 class="text-center my-4">Employee Details</h1>

        <!-- Success Message -->
        <div th:if="${successMessage}" class="alert alert-success alert-dismissible fade show" role="alert">
            <span th:text="${successMessage}"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>

        <!-- Error Message -->
        <div th:if="${errorMessage}" class="alert alert-danger alert-dismissible fade show" role="alert">
            <span th:text="${errorMessage}"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Salary</th>
                        <th>Department</th>
                        <th>Status</th>
                        <th>Phone</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <tr th:each="employee : ${employees}">
                        <td th:text="${employee.EMP_ID}"></td>
                        <td th:text="${employee.E_NAME}"></td>
                        <td th:text="${employee.SALARY}"></td>
                        <td th:text="${employee.DEPARTMENT}"></td>
                        <td th:text="${employee.STATUS}"></td>
                        <td th:text="${employee.PHONENO}"></td>
                        <td>
                            <a class="btn btn-primary btn-sm" th:href="@{/employees/edit(EMP_ID=${employee.EMP_ID})}">Edit</a>
                            <a class="btn btn-danger btn-sm" th:href="@{/employees/delete(EMP_ID=${employee.EMP_ID})}" onclick="return confirm('Are you sure you want to delete this employee?')">Delete</a>
                        </td>
                    </tr>
                </tbody>
            </table>
            
            <a class="btn btn-primary" href="/employees/create">Add Employee</a>
            <button class="btn btn-danger" onclick="logout()">Logout</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

and this is my database script from this user NEWSO.USERR table to crate the login system

-- Create a new tablespace for the new project

CREATE TABLESPACE NEW_DATA
  DATAFILE 'C:/Chetan/Development/DB/NEW_DATA.dbf'
  SIZE 100M AUTOEXTEND ON; 
  
  
alter session set "_ORACLE_SCRIPT"=true;

-- Part 1: Create User to serve as the 'Schema Owner' of all the objects
CREATE USER NEWSO IDENTIFIED BY "NEWSO_pwd"
  DEFAULT TABLESPACE users
  TEMPORARY TABLESPACE temp
  QUOTA UNLIMITED ON users;


-- Part 2: Create Application Connect User with Read-write access to the schema
    CREATE USER NEWCU IDENTIFIED BY "NEWCU_pwd"
  DEFAULT TABLESPACE users
  TEMPORARY TABLESPACE temp;
  
ALTER USER NEWSO quota unlimited on NEW_DATA;


-- ROLES

-- Part 1: Create application role with write access
CREATE ROLE NEW_ROLE_CU_RW NOT IDENTIFIED;
GRANT CREATE SESSION TO NEW_ROLE_CU_RW;
GRANT CONNECT TO NEW_ROLE_CU_RW;

-- Assign ROLES
GRANT NEW_ROLE_CU_RW TO NEWCU;


-- GRANT SELECT on sequence (if you're using sequences to generate primary keys)
CREATE SEQUENCE NEWSO.USERR_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
GRANT SELECT ON NEWSO.USERR_SEQ TO NEW_ROLE_CU_RW;

CREATE TABLE NEWSO.USERR
(

NAME 	VARCHAR2(255)NOT NULL,
EMAIL 		VARCHAR2(255)NOT NULL,
PASSWORD 		VARCHAR2(255)NOT NULL,
PHONENO		VARCHAR2(255)NOT NULL

)TABLESPACE NEW_DATA;

GRANT SELECT, INSERT, UPDATE, DELETE ON NEWSO.USERR TO NEW_ROLE_CU_RW;

-- NOTE: Hibernate will handle the table creation based on your JPA entities
-- You do not need to manually create the APP_USER table here, Hibernate will automatically generate it based on the code.
-- Just make sure the entity

Alter table NEWSO.USERR Add id NUMBER NOT NULL;

Alter table NEWSO.USERR Add constraint user_pk PRIMARY KEY (id);

select * from NEWSO.USERR;


select USERR from NEWSO where  upper(USERR) ='USERR';

select sys_context('userenv','current_schema') From dual;

select constraint_name from user_constraints where table_name = 'NEWSO.USERR' and constraint_type='P';

alter table NEWSO.USERR drop primary key;


CREATE TABLE NEWSO.EMPLOYEE
(
EMP_ID VARCHAR2(50) PRIMARY KEY,
E_NAME 	VARCHAR2(255)NOT NULL,
SALARY NUMBER(10,2) NOT NULL,
DEPARTMENT VARCHAR(255) NOT NULL,
STATUS VARCHAR2(20) NOT NULL,
PHONENO	VARCHAR2(20) NOT NULL

)TABLESPACE NEW_DATA;



GRANT SELECT, INSERT, UPDATE, DELETE ON NEWSO.EMPLOYEE TO NEW_ROLE_CU_RW;

INSERT INTO NEWSO.EMPLOYEE (EMP_ID,E_NAME,SALARY,DEPARTMENT,STATUS,PHONENO) VALUES('E001','CHETAN',500000,'IT','ACTIVE','912342134');
INSERT INTO NEWSO.EMPLOYEE (EMP_ID,E_NAME,SALARY,DEPARTMENT,STATUS,PHONENO) VALUES('E002','SHARON',400000,'IT','ACTIVE','9123421354');

SELECT * FROM NEWSO.EMPLOYEE;

desc newso.employee;

alter table newso.employee modify EMP_ID VARCHAR2(255 Char);
alter table newso.employee modify phoneno varchar2(255 char);

alter table newso.employee modify status varchar2(255 char);
alter table newso.employee modify salary float(53); 
commit;



according to this file strute make a login system when user is clicks login button in index.html page of staic folder sussusrflly logged in it shoul open index template/employess/index.html this file.
