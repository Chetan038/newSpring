this is employee controller "

	package com.bostmytools.emppmng.controllers;
	
	import java.util.List;
	
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.PathVariable;
	import org.springframework.web.bind.annotation.PostMapping;
	import org.springframework.web.bind.annotation.PutMapping;
	import org.springframework.web.bind.annotation.RequestBody;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RestController;
	
	import com.bostmytools.emppmng.models.Employee;
	import com.bostmytools.emppmng.services.EmployeeService;
	
	//@CrossOrigin(origins="*")
	@RestController
	@RequestMapping("/api/employees")
	public class EmployeesController {
	
	    @Autowired
	    private EmployeeService employeeService;
	
	    @GetMapping("/all")
	    public List<Employee> getAllEmployees() {
	        return employeeService.getAllEmployees();
	    }
	    
	    @GetMapping("/byid/{empId}")
	    public ResponseEntity<Employee> getEmployeeById(@PathVariable String empId) {
	        Employee employee = employeeService.getEmployeeById(empId).orElse(null);
	        if (employee != null) {
	            return ResponseEntity.ok(employee);
	        } else {
	            return ResponseEntity.notFound().build();
	        }
	    }
	    
	    @PostMapping("/create")
	    public ResponseEntity<Employee> createEmployee(@RequestBody Employee employee) {
	        try {
	            Employee createdEmployee = employeeService.createEmployee(employee);
	            return ResponseEntity.ok(createdEmployee);
	        } catch (Exception e) {
	            return ResponseEntity.badRequest().build();
	        }
	    }
	    
	    @PutMapping("/edit/{empId}")
	    public ResponseEntity<Employee> updateEmployee(@PathVariable String empId, @RequestBody Employee employee) {
	        try {
	            employee.setEMP_ID(empId); 
	            Employee updatedEmployee = employeeService.updateEmployee(empId, employee);
	            if (updatedEmployee != null) {
	                return ResponseEntity.ok(updatedEmployee);
	            } else {
	                return ResponseEntity.notFound().build();
	            }
	        } catch (Exception e) {
	            return ResponseEntity.badRequest().build();
	        }
	    }
	    
	    @DeleteMapping("/delete/{empId}")
	    public ResponseEntity<Void> deleteEmployee(@PathVariable String empId) {
	        try {
	            employeeService.deleteEmployee(empId);
	            return ResponseEntity.noContent().build();
	        } catch (Exception e) {
	            return ResponseEntity.notFound().build();
	        }
	    }
	}


this is user controller 

package com.bostmytools.emppmng.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bostmytools.emppmng.config.JwtUtil;
import com.bostmytools.emppmng.models.User;
import com.bostmytools.emppmng.services.UserService;

import java.util.HashMap;
import java.util.Map;


//@CrossOrigin(origins="*")
@RestController
@RequestMapping("/api")
public class UserController {

    @Autowired
    private UserService userService;
    
    @Autowired
    private JwtUtil jwtUtil;

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Map<String, String> credentials) {
        String email = credentials.get("email");
        String password = credentials.get("password");
        
        User user = userService.authenticate(email, password).orElse(null);
        
        if (user != null) {
            String token = jwtUtil.generateToken(user.getEmail());
            
            Map<String, Object> response = new HashMap<>();
            response.put("token", token);
            response.put("user", Map.of(
                "id", user.getId(),
                "name", user.getName(),
                "email", user.getEmail(),
                "phoneNo", user.getPhoneNo()
            ));
            
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(401).body(Map.of("message", "Invalid credentials"));
        }
    }
    
    
}






























//@GetMapping("/test-auth")
//public ResponseEntity<?> testAuth() {
//    return ResponseEntity.ok(Map.of("message", "You are authenticated!"));
//}
Hibernate: select u1_0.id,u1_0.email,u1_0.name,u1_0.password,u1_0.phoneno from newso.userr u1_0 where u1_0.email=? and u1_0.password=?


import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, catchError, map, throwError } from 'rxjs';
import { Employee } from './employee.model'; 

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {

  private apiUrl = 'http://localhost:8080/api/employees/all';

  constructor(private http: HttpClient) { }

  getEmployees(): Observable<Employee[]> {
    return this.http.get<any>(this.apiUrl).pipe(
      map(response => {
        // Check if response is an array
        if (Array.isArray(response)) {
          return response as Employee[];
        } 
        // If response has a data property containing the array
        else if (response && Array.isArray(response.data)) {
          return response.data as Employee[];
        }
        // Handle other response structures
        else {
          console.warn('Unexpected API response structure:', response);
          return [] as Employee[];
        }
      }),
      catchError(error => {
        console.error('API error:', error);
        return throwError(() => new Error('Failed to fetch employees'));
      })
    );
  }
}
