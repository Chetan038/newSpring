this is my file structure of angular project

src/app/components/dashboard->dashboard.component.html,dashboard.component.ts
src/app/interceptors->jwt-interceptor.service.ts
src/app/services->auth.guard.ts,employee.model.ts,employee.service.ts,login.service.ts,
src/app->app.component.css,app.component.ts,app.module.ts


dashboard.component.html
<h2>Employee List</h2>

<table border="1">
  <thead>
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>SALARY</th>
      <th>Position</th>
      <th>DEPARTMENT</th>
      <th>PHONENO</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let employee of employees">
      <td>{{ employee.EMP_ID }}</td>
      <td>{{ employee.E_NAME }}</td>
      <td>{{ employee.SALARY }}</td>
      <td>{{ employee.DEPARTMENT }}</td>
      <td>{{ employee.PHONENO }}</td>
      STATUS
    </tr>
  </tbody>
</table>
dashboard.component.ts
import { Component, OnInit } from '@angular/core';
import { Employee } from '../../services/employee.model';
import { EmployeeService } from '../../services/employee.service';

@Component({
  selector: 'app-dashboard',
  standalone: false,
  templateUrl: './dashboard.component.html',
  styleUrl: './dashboard.component.css'
})
export class DashboardComponent implements OnInit {

  employees : Employee[]=[];

  constructor(private employeeService: EmployeeService){}

  ngOnInit(): void {
    this.loadEmployees();
  }

  loadEmployees(){
    this.employeeService.getEmployees().subscribe(

      (data : Employee[])=>{
        console.log('api response',data);
        this.employees=data;
      },
      (error)=>{console.error('Error Fetching employees:',error);}
      );
    
  }

}

jwt-interceptor.service.ts
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class JwtInterceptor implements HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {

    const token = localStorage.getItem('token');
    console.log('tokkkken',token)
    if(token){
      const clonedRequest = req.clone({
        setHeaders:{
          Authorization: `Bearer ${token}`
        }
      });
      return next.handle(clonedRequest);
    }
  return next.handle(req);
  }
}
auth.guard.ts
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { LoginService } from './login.service';

@Injectable({
  providedIn: 'root',
})
export class AuthGuard implements CanActivate {
  constructor(private loginService:LoginService,private router:Router) {}

  canActivate(): boolean | Observable<boolean> {
 
    if (this.loginService.isLoggedIn()) {
      return true;
    }
   
     this.router.navigate(['login'])

    return false;
  }
}



employee.model.ts
export interface Employee{
    EMP_ID : string;
    E_NAME : string;
    SALARY : string;
    DEPARTMENT : string;
    STATUS: string;
    PHONENO: string; 

}
employee.service.ts
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Employee } from './employee.model'; 

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {

  private apiUrl = 'http://localhost:8080/api/employees/all';



    constructor(private readonly http:HttpClient) { }

    getEmployees():Observable<Employee[]>{
      return this.http.get<Employee[]>(this.apiUrl);
    }
}

login.service.ts
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class LoginService {

  url="http://localhost:8080"


  constructor(private readonly http:HttpClient) { }



  generateToken(credientials:any){
    return this.http.post(`${this.url}/api/login`,credientials);
  }

  logInUser(token :string)
  {
    localStorage.setItem("token",token)
    return true;
  }


  isLoggedIn(){
    let token=localStorage.getItem("token")
    if(token==undefined || token=='' || token==null)
    {
      return false;
    }
    else{
      return true;
    }
  }

  logout(){
    localStorage.removeItem("token");
    return true;
  }

  getToken(){
    return localStorage.getItem('token')
  }
}


app.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  standalone: false,
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'empppmng';
}

app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './components/login/login.component';
import { NavbarComponent } from './components/navbar/navbar.component';
import { HOMEComponent } from './components/home/home.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { FormsModule } from '@angular/forms';
import { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';
import { JwtInterceptor } from './interceptors/jwt-interceptor.service';



@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    NavbarComponent,
    HOMEComponent,
    DashboardComponent,
    
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    HttpClientModule
   
  ],
  providers: [{provide:HTTP_INTERCEPTORS,useClass:JwtInterceptor,multi:true}],
  bootstrap: [AppComponent]
})
export class AppModule { }


fix this code this is not able to display the data to my dashboard component from baCKEND 
