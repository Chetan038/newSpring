
newpost  compooent .html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Post Submission Form</title>
   
</head>
<body>

    <div class="container">
        <form>
            <div class="form-group">
                <label for="postId">Post ID</label>
                <input type="text" id="postId" name="postId"  [(ngModel)]="post.post_id" required [readOnly]="isEditMode">
            </div>
            
            <div class="form-group">
                <label for="postHeader">Post Header</label>
                <input type="text" id="postHeader"  name="postHeader" [(ngModel)]="post.post_header" required>
            </div>

            <div class="form-group">
                <label for="postContent">Post Content</label>
                <textarea id="postContent" name="postContent" [(ngModel)]="post.post_content" required></textarea>
            </div>

            <div class="form-group">
               
                <label for="status" *ngIf="isEditMode">Status</label>
                <select id="status"  name="status"  [(ngModel)]="post.status"  *ngIf="isEditMode">
                
                <option value="ACTIVE">ACTIVE</option>
                <option value="INACTIVE">INACTIVE</option>
                </select>

               
               
            </div>

            <div class="form-group">
                <label for="postedBy">Posted By</label>
                <input type="text" id="postedBy" name="postedBy"  [(ngModel)]="post.posted_by" required>
            </div>

            <div class="button-group">
                <button type="submit"  (click)="submitPostForm()" routerLink="/home" >{{isEditMode?'update':'submit'}}</button>
                <button type="button" routerLink="/home" class="cancel-btn">Cancel</button>
            </div>
        </form>
        
        <div class="illustration">
            <img src="https://apps.flowscript.ai/flowscript/static/media/construction.1f81f165c187354329aa1a34fc9d6b1d.svg" alt="People collaborating on a project interface" />
        </div>

        <div class="illustrationn">
            <img src="" />
        </div>
    </div>
    <p *ngIf="responseMessage">{{ responseMessage }}</p>
    

</body>
</html>


new post component .ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { PostService } from '../../services/post.service';
import { Post } from '../../services/post.model';

@Component({
  selector: 'app-new-post',
  standalone: false,
  templateUrl: './new-post.component.html',
  styleUrl: './new-post.component.css'
})
export class NewPostComponent implements OnInit {
 
  posts: Post[] = [];
  isEditMode = false;
  statusValue : string="ACTIVE";

  // Adjust the type of post_id to match your Post model (number)
  post = {
    post_id: 0, // Changed from string to number
    post_header: '',
    post_content: '',
    status: 'ACTIVE',
    posted_by: '',
    posted_at: '' 
  };

  responseMessage: string = '';

  constructor(
    private postService: PostService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    // Check if we're in edit mode by looking for a post ID in the URL
    this.route.params.subscribe(params => {
      const postId = params['id'];
      if (postId) {
        this.isEditMode = true;
        // Convert postId to number before using it
        const numericPostId = Number(postId);
        
        // Get the post data for editing
        this.postService.getPosts().subscribe(posts => {
          this.posts = posts;
          const postToEdit = this.posts.find(p => p.post_id === numericPostId);
          if (postToEdit) {
            // Make a type-safe copy
            this.post = {
              post_id: postToEdit.post_id,
              post_header: postToEdit.post_header,
              post_content: postToEdit.post_content,
              status: postToEdit.status,
              posted_by: postToEdit.posted_by,
              posted_at: postToEdit.posted_at
            };
          } else {
            this.responseMessage = 'Post not found!';
          }
        });
      }
    });
  }

  submitPostForm() {
    if (this.isEditMode) {
      // Update existing post
      this.postService.editPost(this.post as Post).subscribe({
        next: (response) => {
          this.responseMessage = 'Post updated successfully!';
          setTimeout(() => {
            this.router.navigate(['/home']);
          }, 1500);
        },
        error: (error) => {
          this.responseMessage = 'Failed to update post!';
        }
      });
    } else {
      // Create new post
      if (this.post.post_id) {
        this.postService.createPost(this.post).subscribe({
          next: (response) => {
            this.responseMessage = 'Post created successfully!';
            this.post = {
              post_id: 0, // Changed from empty string to 0
              post_header: '',
              post_content: '',
              status: '',
              posted_by: '',
              posted_at: ''
            };
            setTimeout(() => {
              this.router.navigate(['/home']);
            }, 1500);
          },
          error: (error) => {
            this.responseMessage = 'Failed to submit data!';
          }
        });
      }
    }
  }

  cancelForm() {
    this.router.navigate(['/home']);
  }
}

post modal.ts
export interface Post{
    post_id : number;
    post_header : string;
    post_content : string;
    status: string;
    posted_by:string;
    posted_at: string; 

}
post.service.ts
      import { HttpClient } from '@angular/common/http';
      import { Injectable } from '@angular/core';
      import { Observable } from 'rxjs';
      import {Post} from './post.model';

      @Injectable({
        providedIn: 'root'
      })
      export class PostService {

        private apiUrlt='http://localhost:8080/api/posts/all';
        private posturl='http://localhost:8080/api/posts/create';
        private deleteurl='http://localhost:8080/api/posts/delete';
        private editurl='http://localhost:8080/api/posts/edit';
        private toggleurl='http://localhost:8080/api/posts/togglestatus';

        constructor(private http:HttpClient) { }

        getPosts(): Observable<Post[]>{
          return this.http.get<Post[]>(this.apiUrlt);
        }

        togglestatus(post_id:number):Observable<any>{
          return this.http.put(`${this.toggleurl}/${post_id}`,{});
        }

        createPost(data:any):Observable<any>{
          return this.http.post(this.posturl,data);
        }

        editPost(post:Post):Observable<Post>{
          return this.http.put<Post>(`${this.editurl}/${post.post_id}`,post);
        }

        deletePost(postid: number ):Observable<any>{
          return this.http.delete(`${this.deleteurl}/${postid}`)
        }

        getPostById(postId: string): Observable<Post> {
          return this.http.get<Post>(`http://localhost:8080/api/posts/byid/${postId}`);
        }
        


      }

oracal sql script 

-- Create a new tablespace for the new project

CREATE TABLESPACE NEW_DATA
  DATAFILE 'C:/Chetan/Development/DB/NEW_DATA.dbf'
  SIZE 100M AUTOEXTEND ON; 
  
  
alter session set "_ORACLE_SCRIPT"=true;



-- post table


CREATE TABLE NEWSO.POSTS
(
POST_SEQ_ID NUMBER PRIMARY KEY,
POST_HEADER VARCHAR2(4000)NOT NULL,
POST_CONTENT CLOB,
STATUS VARCHAR2(220) NOT NULL,
POSTED_BY VARCHAR2(220) NOT NULL,
POSTED_AT TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP

)TABLESPACE NEW_DATA;



GRANT SELECT, INSERT, UPDATE, DELETE ON NEWSO.POSTS TO NEW_ROLE_CU_RW;

INSERT INTO NEWSO.POSTS(POST_SEQ_ID,POST_HEADER,POST_CONTENT,STATUS,POSTED_BY) VALUES(8,'ADDED CONTACT US PAGdE','THIS IS LITTLE ON CONTdNTNEN AJSLD ALSDJ LAJSKLD JLASJD LAJSDLK JASL; JKLASJ L;ASJD LJASLK JAS JL;ASJ L;SJA JAS  ASJDL;J  ASD','ACTIVE','CHETANd');
commit;





thisis my backend spring boot code

Posts.java
package com.bostmytools.emppmng.models;

import java.time.OffsetDateTime;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Lob;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;

@Entity
@Table(name = "POSTS", schema = "NEWSO")
public class Posts {

	@Id
	@Column(name = "POST_SEQ_ID", nullable = false)
	private long post_id;

	@Column(name = "POST_HEADER", nullable = false)
	private String post_header;

	@Lob
	@Column(name = "POST_CONTENT", columnDefinition = "CLOB", nullable = false)
	private String post_content;

	@Column(name = "STATUS", nullable = false)
	private String status;

	@Column(name = "POSTED_BY", nullable = false)
	private String posted_by;
	
	@Column(name = "POSTED_AT", columnDefinition="TIMESTAMP WITH TIME ZONE", nullable = false)
	private OffsetDateTime posted_at;
	
	
	@PrePersist
	protected void onCreate() {
		if(posted_at==null) {
			posted_at=OffsetDateTime.now();
		}
	}

	public long getPost_id() {
		return post_id;
	}

	public void setPost_id(long post_id) {
		this.post_id = post_id;
	}

	public String getPost_header() {
		return post_header;
	}

	public void setPost_header(String post_header) {
		this.post_header = post_header;
	}

	public String getPost_content() {
		return post_content;
	}

	public void setPost_content(String post_content) {
		this.post_content = post_content;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getPosted_by() {
		return posted_by;
	}

	public void setPosted_by(String posted_by) {
		this.posted_by = posted_by;
	}

	public OffsetDateTime getPosted_at() {
		return posted_at;
	}

	public void setPosted_at(OffsetDateTime posted_at) {
		this.posted_at = posted_at;
	}
	
	

}

create a sequence for post id will be autogenereated 

and fix in front end angular code so when i createing a new post it should 
not diplay for id and when submiiting the new post it should be auto genreate 
which is in the backend code 
all id along with the new post should be saved in database.





