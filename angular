<h2 mat-dialog-title>Edit Post</h2>
<div mat-dialog-content>
  <mat-form-field appearance="outline">
    <mat-label>Post Header</mat-label>
    <input matInput [(ngModel)]="editedPost.post_header">
  </mat-form-field>

  <mat-form-field appearance="outline">
    <mat-label>Post Content</mat-label>
    <textarea matInput [(ngModel)]="editedPost.post_content"></textarea>
  </mat-form-field>

  <mat-form-field appearance="outline">
    <mat-label>Status</mat-label>
    <input matInput [(ngModel)]="editedPost.status">
  </mat-form-field>

  <mat-form-field appearance="outline">
    <mat-label>Posted By</mat-label>
    <input matInput [(ngModel)]="editedPost.posted_by">
  </mat-form-field>
</div>
<div mat-dialog-actions>
  <button mat-button (click)="closeModal()">Cancel</button>
  <button mat-button color="primary" (click)="saveChanges()">Save</button>
</div>


Q






import { Component, Inject } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { PostService } from '../../services/post.service';
import { Post } from '../../services/post.model';

@Component({
  selector: 'app-edit-post-modal',
  templateUrl: './edit-post-modal.component.html',
  styleUrls: ['./edit-post-modal.component.css']
})
export class EditPostModalComponent {
  editedPost: Post;

  constructor(
    public dialogRef: MatDialogRef<EditPostModalComponent>,
    @Inject(MAT_DIALOG_DATA) public data: Post,
    private postService: PostService
  ) {
    this.editedPost = { ...data }; // Create a copy to avoid modifying the original object
  }

  saveChanges(): void {
    this.postService.editPost(this.editedPost).subscribe({
      next: () => {
        this.dialogRef.close(this.editedPost); // Pass updated data back
      },
      error: () => {
        alert('Failed to update post');
      }
    });
  }

  closeModal(): void {
    this.dialogRef.close();
  }
}



i have edit-post-modal compoent already 

this is my post.compoenet.ts
import { Component } from '@angular/core';
import { PostService } from '../../services/post.service';
import { Post } from '../../services/post.model';

@Component({
  selector: 'app-new-post',
  standalone: false,
  templateUrl: './new-post.component.html',
  styleUrl: './new-post.component.css'
})


export class NewPostComponent {
 
  posts : Post[]=[];

  post={
    post_id : '',
    post_header : '',
    post_content : '',
    status: '',
    posted_by:'',
    posted_at: '' 
  };

  responseMessage:string='';

  constructor(private postService:PostService){}

  submitpostForm(){
    if(this.post.post_id)
    {
      this.postService.createPost(this.post).subscribe({
        next:(Response)=>{
          this.responseMessage='sent';
          this.post={ post_id : '',
            post_header : '',
            post_content : '',
            status: '',
            posted_by:'',
            posted_at: '' };
        },
        error: (error) => {
          this.responseMessage = 'Failed to submit data!';
        }});
      
      
    }

  }





}


this is mmy post.compontnt html
 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Post Submission Form</title>
    <style>
        /* General Styles */
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #ffffff);
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 90vh;
        }

        /* Form Container */
        .container {
            width: 60%;
            background: rgba(226, 192, 21, 0.596);
            padding: 30px;
            border-radius: 10px;
            box-shadow: 5px 5px 20px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            position: relative;
            height: 85%;
        }

        /* Form Fields */
        .form-group {
            margin-bottom: 15px;
        }

        label {
            font-weight: bold;
            color: #000000;
            display: block;
            margin-bottom: 5px;
        }

        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ffd700;
            border-radius: 5px;
            font-size: 16px;
        }

        textarea {
            height: 120px;
            resize: none;
        }

        /* Buttons */
        .button-group {
            margin-top: 15px;
            display: flex;
            justify-content: space-between;
        }

        button {
            background: #ffea01;
            color: rgb(0, 0, 0);
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.3s;
        }

        button:hover {
            background: #e6b800;
        }

        .cancel-btn {
            background: #ff1515;
        }

        .cancel-btn:hover {
            background: #a9a9a9;
        }

        /* Right-side Background */
        .image-space {
            position: absolute;
            right: 0;
            top: 50%;
            transform: translateY(-50%);
            width: 150px;
            height: 950px;
            
            background-size: contain;
            opacity: 0.3;
        }

    </style>
</head>
<body>

    <div class="container">
        <form>
            <div class="form-group">
                <label for="postId">Post ID</label>
                <input type="text" id="postId" name="postId"  [(ngModel)]="post.post_id" required >
            </div>
            
            <div class="form-group">
                <label for="postHeader">Post Header</label>
                <input type="text" id="postHeader"  name="postHeader" [(ngModel)]="post.post_header" required>
            </div>

            <div class="form-group">
                <label for="postContent">Post Content</label>
                <textarea id="postContent" name="postContent" [(ngModel)]="post.post_content" required></textarea>
            </div>

            <div class="form-group">
                <label for="status">Status</label>
                <input type="text" id="status"  name="status" [(ngModel)]="post.status" required>
            </div>

            <div class="form-group">
                <label for="postedBy">Posted By</label>
                <input type="text" id="postedBy" name="postedBy"  [(ngModel)]="post.posted_by" required>
            </div>

            <div class="button-group">
                <button type="submit"  (click)="submitpostForm()" routerLink="/home" >Submit</button>
                <button type="button" routerLink="/home" class="cancel-btn">Cancel</button>
            </div>
        </form>
        
        <div class="illustration">
            <img src="https://apps.flowscript.ai/flowscript/static/media/construction.1f81f165c187354329aa1a34fc9d6b1d.svg" alt="People collaborating on a project interface" />
        </div>

        <div class="illustrationn">
            <img src="" />
        </div>
    </div>
    <p *ngIf="responseMessage">{{ responseMessage }}</p>
    

</body>
</html>


post service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import {Post} from './post.model';

@Injectable({
  providedIn: 'root'
})
export class PostService {

  private apiUrlt='http://localhost:8080/api/posts/all';
  private posturl='http://localhost:8080/api/posts/create';
  private deleteurl='http://localhost:8080/api/posts/delete';
  private editurl='http://localhost:8080/api/posts/edit';
  private toggleurl='http://localhost:8080/api/posts/togglestatus';

  constructor(private http:HttpClient) { }

  getPosts(): Observable<Post[]>{
    return this.http.get<Post[]>(this.apiUrlt);
  }

  togglestatus(post_id:number):Observable<any>{
    return this.http.put(`${this.toggleurl}/${post_id}`,{});
  }

  createPost(data:any):Observable<any>{
    return this.http.post(this.posturl,data);
  }

  editPost(post:Post):Observable<any>{
    return this.http.put(`${this.editurl}/${post.post_id}`,post);
  }

  deletePost(postid: number ):Observable<any>{
    return this.http.delete(`${this.deleteurl}/${postid}`)
  }


}


create a angular material modal when we click on edit buton in post html it should open moel and send the json data to backend 

guide step by step how to do and make code simipar as possible 
