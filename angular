

edit-post modal.component.ts

import { Component, Inject } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { PostService } from '../../services/post.service';
import { Post } from '../../services/post.model';

@Component({
  selector: 'app-edit-post-modal',
  templateUrl: './edit-post-modal.component.html',
  standalone:false,
  styleUrls: ['./edit-post-modal.component.css']
})
export class EditPostModalComponent {
  editedPost: Post;

  constructor(
    public dialogRef: MatDialogRef<EditPostModalComponent>,
    @Inject(MAT_DIALOG_DATA) public data: Post,
    private postService: PostService
  ) {
    this.editedPost = { ...data }; // Create a copy to avoid modifying the original object
  }

  saveChanges(): void {
    this.postService.editPost(this.editedPost).subscribe({
      next: () => {
        this.dialogRef.close(this.editedPost); // Pass updated data back
      },
      error: () => {
        alert('Failed to update post');
      }
    });
  }

  closeModal(): void {
    this.dialogRef.close();
  }
}



editcomponent,html
<h2 mat-dialog-title>Edit Post</h2>
<div mat-dialog-content>
  <mat-form-field appearance="outline">
    <mat-label>Post Header</mat-label>
    <input matInput [(ngModel)]="editedPost.post_header">
  </mat-form-field>

  <mat-form-field appearance="outline">
    <mat-label>Post Content</mat-label>
    <textarea matInput [(ngModel)]="editedPost.post_content"></textarea>
  </mat-form-field>

  <mat-form-field appearance="outline">
    <mat-label>Status</mat-label>
    <input matInput [(ngModel)]="editedPost.status">
  </mat-form-field>

  <mat-form-field appearance="outline">
    <mat-label>Posted By</mat-label>
    <input matInput [(ngModel)]="editedPost.posted_by">
  </mat-form-field>
</div>
<div mat-dialog-actions>
  <button mat-button (click)="closeModal()">Cancel</button>
  <button mat-button color="primary" (click)="saveChanges()">Save</button>
</div>

home.compoent.ts

<div class="post-container">

  <div class="post-row">
    <ng-container *ngFor="let post of posts">
      <div class="post-card" *ngIf="post.status === 'ACTIVE' || loggedIn">
        <div class="post-header">
          <p class="posted-info">
            <strong>{{ post.posted_by }}</strong> | {{ post.status }} {{ post.posted_at }} (ID: {{ post.post_id }})
          </p>
          <h3>{{ post.post_header }}</h3>
        </div>
        <div class="post-content">
          <p>{{ post.post_content }}</p>
       
      <button class="btn-1" *ngIf="loggedIn" (click)="togglestatus(post)">
        {{ post.status === 'ACTIVE' ? 'Deactivate' : 'Activate' }}
      </button>
          <button *ngIf="loggedIn" routerLink="/dashboard" (click)="openEditDialog(post)" class="btn-1">Edit Post</button>
          <button *ngIf="loggedIn" class="btn-2" (click)="deletePost(post.post_id)">Delete</button>
        </div>
      </div>
    </ng-container>
  </div>

 

</div>

 

home.compoent.ts
import { Component, OnInit } from '@angular/core';
import { LoginService } from '../../services/login.service';
import {Post} from '../../services/post.model'
import { PostService } from '../../services/post.service';
import { MatDialog } from '@angular/material/dialog';
import { EditPostModalComponent } from '../edit-post-modal/edit-post-modal.component';


@Component({
  selector: 'app-home',
  standalone: false,
  templateUrl: './home.component.html',
  styleUrl: './home.component.css'
})
export class HOMEComponent implements OnInit{

    posts: Post[]=[];
    public loggedIn=false;
  
    constructor(private readonly loginService:LoginService, private postService:PostService,private dialog:MatDialog){}
    ngOnInit(): void {
      this.loggedIn=this.loginService.isLoggedIn();
      this.loadPosts();

    }

    loadPosts(){
      this.postService.getPosts().subscribe(
        (data: Post[])=>{
          console.log('posts',data);
          this.posts=data;
        },
      (error)=>{console.error('erro',error);}
      );
      
    }

    deletePost(postid:number){
      if(confirm('are you sure?'))
      {
        this.postService.deletePost(postid).subscribe(()=>{
          this.posts=this.posts.filter(pst => pst.post_id!==postid);
        });
      }
    }


    togglestatus(post:Post):void{
      this.postService.togglestatus(post.post_id).subscribe((updatedPost)=>
      {
        post.status=updatedPost.status;
      });
    }


    openEditDialog(post: Post): void {
      const dialogRef = this.dialog.open(EditPostModalComponent, {
        width: '400px',
        data: post
      });
  
      dialogRef.afterClosed().subscribe(result => {
        if (result) {
          this.posts = this.posts.map(p => (p.post_id === result.post_id ? result : p));
        }
      });
    }
  
}


post.service
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import {Post} from './post.model';

@Injectable({
  providedIn: 'root'
})
export class PostService {

  private apiUrlt='http://localhost:8080/api/posts/all';
  private posturl='http://localhost:8080/api/posts/create';
  private deleteurl='http://localhost:8080/api/posts/delete';
  private editurl='http://localhost:8080/api/posts/edit';
  private toggleurl='http://localhost:8080/api/posts/togglestatus';

  constructor(private http:HttpClient) { }

  getPosts(): Observable<Post[]>{
    return this.http.get<Post[]>(this.apiUrlt);
  }

  togglestatus(post_id:number):Observable<any>{
    return this.http.put(`${this.toggleurl}/${post_id}`,{});
  }

  createPost(data:any):Observable<any>{
    return this.http.post(this.posturl,data);
  }

  editPost(post:Post):Observable<any>{
    return this.http.put(`${this.editurl}/${post.post_id}`,post);
  }

  deletePost(postid: number ):Observable<any>{
    return this.http.delete(`${this.deleteurl}/${postid}`)
  }


}


a[pp module

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './components/login/login.component';
import { NavbarComponent } from './components/navbar/navbar.component';
import { HOMEComponent } from './components/home/home.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { FormsModule } from '@angular/forms';
import { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';
import { JwtInterceptor } from './interceptors/jwt-interceptor.service';
import { MatDialogModule } from '@angular/material/dialog';
import { MatButtonModule } from '@angular/material/button';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { EmployeeModalComponent } from './components/employee-modal/employee-modal.component';
import { LandingPageComponent } from './components/landing-page/landing-page.component';
import { NewPostComponent } from './components/new-post/new-post.component';
import { EditPostModalComponent } from './components/edit-post-modal/edit-post-modal.component';
import { AdminDashboardComponent } from './components/admin-dashboard/admin-dashboard.component';





@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    NavbarComponent,
    HOMEComponent,
    DashboardComponent,
    EmployeeModalComponent,
    LandingPageComponent,
    NewPostComponent,
    EditPostModalComponent,
    AdminDashboardComponent
    
    
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    HttpClientModule,
    MatDialogModule,
    MatButtonModule,
    MatInputModule,
    MatFormFieldModule
  ],
  providers: [{provide:HTTP_INTERCEPTORS,useClass:JwtInterceptor,multi:true}],
  bootstrap: [AppComponent]
})
export class AppModule { }



fix my edit modal is not working its not making changes in database and give css for modal 


