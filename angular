PostController.java


package com.bostmytools.emppmng.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bostmytools.emppmng.models.Posts;
import com.bostmytools.emppmng.services.PostService;


@CrossOrigin(origins = "*", allowedHeaders = "*")
@RestController
@RequestMapping("/api/posts")
public class PostsController {
	
	
	
	@Autowired
	private PostService postService;
	
	
	
	@GetMapping("/all")
	public List<Posts> showAllPosts(){
		return postService.showAllPosts();
		
	}
	
	
	@PostMapping("/create")
	public ResponseEntity<Posts> createPost(@RequestBody Posts posts){
		
		try {
		Posts createdPost = postService.createPost(posts);
		return ResponseEntity.ok(createdPost);
		}
		catch(Exception e) {
			return ResponseEntity.badRequest().build();
			
		}
	}
	
	@PutMapping("/edit/{postid}")
	public ResponseEntity<Posts> editPost(@PathVariable long postid,@RequestBody Posts posts){
		try {
			posts.setPost_id(postid);
			Posts editedPost=postService.editPost(postid, posts);
			if(editedPost!=null)
			{
				return ResponseEntity.ok(editedPost);
			}
			else
			{return ResponseEntity.notFound().build();
			}
			
			}
		 catch (Exception e) {
	            return ResponseEntity.badRequest().build();
	        }
			
		}
	
	
	@PutMapping("{postid}/togglestatus")
	public Posts toggleStatus(@PathVariable long postid) {
		return postService.toggleStatus(postid);
		
	}
	
	
	
	 @DeleteMapping("/delete/{postid}")
	public ResponseEntity<Void> deletePost(@PathVariable long postid){
		try {
			postService.deletePost(postid);
			return ResponseEntity.noContent().build();			
		}
		catch(Exception e) {
			return ResponseEntity.notFound().build();
		}
		}
	
	
	

}


post.java

package com.bostmytools.emppmng.models;

import java.time.OffsetDateTime;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Lob;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;

@Entity
@Table(name = "POSTS", schema = "NEWSO")
public class Posts {

	@Id
	@Column(name = "POST_SEQ_ID", nullable = false)
	private long post_id;

	@Column(name = "POST_HEADER", nullable = false)
	private String post_header;

	@Lob
	@Column(name = "POST_CONTENT", columnDefinition = "CLOB", nullable = false)
	private String post_content;

	@Column(name = "STATUS", nullable = false)
	private String status;

	@Column(name = "POSTED_BY", nullable = false)
	private String posted_by;
	
	@Column(name = "POSTED_AT", columnDefinition="TIMESTAMP WITH TIME ZONE", nullable = false)
	private OffsetDateTime posted_at;
	
	
	@PrePersist
	protected void onCreate() {
		if(posted_at==null) {
			posted_at=OffsetDateTime.now();
		}
	}

	public long getPost_id() {
		return post_id;
	}

	public void setPost_id(long post_id) {
		this.post_id = post_id;
	}

	public String getPost_header() {
		return post_header;
	}

	public void setPost_header(String post_header) {
		this.post_header = post_header;
	}

	public String getPost_content() {
		return post_content;
	}

	public void setPost_content(String post_content) {
		this.post_content = post_content;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getPosted_by() {
		return posted_by;
	}

	public void setPosted_by(String posted_by) {
		this.posted_by = posted_by;
	}

	public OffsetDateTime getPosted_at() {
		return posted_at;
	}

	public void setPosted_at(OffsetDateTime posted_at) {
		this.posted_at = posted_at;
	}
	
	

}

postreposity.java
package com.bostmytools.emppmng.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import com.bostmytools.emppmng.models.Posts;

public interface PostsRepository extends JpaRepository<Posts, Long>{

}
 
postservice.java

package com.bostmytools.emppmng.services;

import java.util.List;

import com.bostmytools.emppmng.models.Posts;

public interface PostService {
	


public List<Posts> showAllPosts();

public Posts createPost(Posts posts);

public Posts editPost(long postid,Posts posts);

public void deletePost(long postid);

Posts toggleStatus(Long postid);

}

postserviceimpl.jva

package com.bostmytools.emppmng.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bostmytools.emppmng.models.Posts;
import com.bostmytools.emppmng.repo.PostsRepository;

@Service
public class PostServiceImpl implements PostService{
	
	@Autowired
	private PostsRepository postRepository;

	@Override
	public List<Posts> showAllPosts() {
		
		return postRepository.findAll();
	}

	@Override
	public Posts createPost(Posts posts) {
		
	
	
		return postRepository.save(posts);
	}

	@Override
	public void deletePost(long postid) {
		if(postRepository.existsById(postid)) {
			this.postRepository.deleteById(postid);
		}
		else {
            throw new IllegalArgumentException("Post with ID " + postid + " not found");
        }
		
	}

	@Override
	public Posts editPost(long postid, Posts posts) {
		if(!postRepository.existsById(postid))
		{
		return null;
		}
		posts.setPost_id(postid);
		 
		return postRepository.save(posts);
	}

	@Override
	public Posts toggleStatus(Long postid) {
		Optional<Posts> postOptional = postRepository.findById(postid);
		if(postOptional.isPresent()) {
			Posts posts=postOptional.get();
			posts.setStatus(posts.getStatus().equals("ACTIVE")?"INACTIVE" : "ACTIVE");
			
		}
		return null;
	}
	
	
	
	
	
	

}


fix the toggle status code part it not updating in data base when using post man its howing 200k but not updating in database
